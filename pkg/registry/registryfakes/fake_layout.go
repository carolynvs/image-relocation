// Code generated by counterfeiter. DO NOT EDIT.
package registryfakes

import (
	sync "sync"

	image "github.com/pivotal/image-relocation/pkg/image"
	registry "github.com/pivotal/image-relocation/pkg/registry"
)

type FakeLayout struct {
	AddStub        func(image.Name) (image.Digest, error)
	addMutex       sync.RWMutex
	addArgsForCall []struct {
		arg1 image.Name
	}
	addReturns struct {
		result1 image.Digest
		result2 error
	}
	addReturnsOnCall map[int]struct {
		result1 image.Digest
		result2 error
	}
	PushStub        func(image.Digest, image.Name) error
	pushMutex       sync.RWMutex
	pushArgsForCall []struct {
		arg1 image.Digest
		arg2 image.Name
	}
	pushReturns struct {
		result1 error
	}
	pushReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLayout) Add(arg1 image.Name) (image.Digest, error) {
	fake.addMutex.Lock()
	ret, specificReturn := fake.addReturnsOnCall[len(fake.addArgsForCall)]
	fake.addArgsForCall = append(fake.addArgsForCall, struct {
		arg1 image.Name
	}{arg1})
	fake.recordInvocation("Add", []interface{}{arg1})
	fake.addMutex.Unlock()
	if fake.AddStub != nil {
		return fake.AddStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.addReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLayout) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *FakeLayout) AddCalls(stub func(image.Name) (image.Digest, error)) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = stub
}

func (fake *FakeLayout) AddArgsForCall(i int) image.Name {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	argsForCall := fake.addArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLayout) AddReturns(result1 image.Digest, result2 error) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = nil
	fake.addReturns = struct {
		result1 image.Digest
		result2 error
	}{result1, result2}
}

func (fake *FakeLayout) AddReturnsOnCall(i int, result1 image.Digest, result2 error) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = nil
	if fake.addReturnsOnCall == nil {
		fake.addReturnsOnCall = make(map[int]struct {
			result1 image.Digest
			result2 error
		})
	}
	fake.addReturnsOnCall[i] = struct {
		result1 image.Digest
		result2 error
	}{result1, result2}
}

func (fake *FakeLayout) Push(arg1 image.Digest, arg2 image.Name) error {
	fake.pushMutex.Lock()
	ret, specificReturn := fake.pushReturnsOnCall[len(fake.pushArgsForCall)]
	fake.pushArgsForCall = append(fake.pushArgsForCall, struct {
		arg1 image.Digest
		arg2 image.Name
	}{arg1, arg2})
	fake.recordInvocation("Push", []interface{}{arg1, arg2})
	fake.pushMutex.Unlock()
	if fake.PushStub != nil {
		return fake.PushStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.pushReturns
	return fakeReturns.result1
}

func (fake *FakeLayout) PushCallCount() int {
	fake.pushMutex.RLock()
	defer fake.pushMutex.RUnlock()
	return len(fake.pushArgsForCall)
}

func (fake *FakeLayout) PushCalls(stub func(image.Digest, image.Name) error) {
	fake.pushMutex.Lock()
	defer fake.pushMutex.Unlock()
	fake.PushStub = stub
}

func (fake *FakeLayout) PushArgsForCall(i int) (image.Digest, image.Name) {
	fake.pushMutex.RLock()
	defer fake.pushMutex.RUnlock()
	argsForCall := fake.pushArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeLayout) PushReturns(result1 error) {
	fake.pushMutex.Lock()
	defer fake.pushMutex.Unlock()
	fake.PushStub = nil
	fake.pushReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLayout) PushReturnsOnCall(i int, result1 error) {
	fake.pushMutex.Lock()
	defer fake.pushMutex.Unlock()
	fake.PushStub = nil
	if fake.pushReturnsOnCall == nil {
		fake.pushReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.pushReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeLayout) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	fake.pushMutex.RLock()
	defer fake.pushMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLayout) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ registry.Layout = new(FakeLayout)
