// Code generated by counterfeiter. DO NOT EDIT.
package registryfakes

import (
	sync "sync"

	image "github.com/pivotal/image-relocation/pkg/image"
	registry "github.com/pivotal/image-relocation/pkg/registry"
)

type FakeClient struct {
	DigestStub        func(image.Name) (image.Digest, error)
	digestMutex       sync.RWMutex
	digestArgsForCall []struct {
		arg1 image.Name
	}
	digestReturns struct {
		result1 image.Digest
		result2 error
	}
	digestReturnsOnCall map[int]struct {
		result1 image.Digest
		result2 error
	}
	NewLayoutStub        func(string) (registry.Layout, error)
	newLayoutMutex       sync.RWMutex
	newLayoutArgsForCall []struct {
		arg1 string
	}
	newLayoutReturns struct {
		result1 registry.Layout
		result2 error
	}
	newLayoutReturnsOnCall map[int]struct {
		result1 registry.Layout
		result2 error
	}
	ReadLayoutStub        func(string) (registry.Layout, error)
	readLayoutMutex       sync.RWMutex
	readLayoutArgsForCall []struct {
		arg1 string
	}
	readLayoutReturns struct {
		result1 registry.Layout
		result2 error
	}
	readLayoutReturnsOnCall map[int]struct {
		result1 registry.Layout
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) Digest(arg1 image.Name) (image.Digest, error) {
	fake.digestMutex.Lock()
	ret, specificReturn := fake.digestReturnsOnCall[len(fake.digestArgsForCall)]
	fake.digestArgsForCall = append(fake.digestArgsForCall, struct {
		arg1 image.Name
	}{arg1})
	fake.recordInvocation("Digest", []interface{}{arg1})
	fake.digestMutex.Unlock()
	if fake.DigestStub != nil {
		return fake.DigestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.digestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) DigestCallCount() int {
	fake.digestMutex.RLock()
	defer fake.digestMutex.RUnlock()
	return len(fake.digestArgsForCall)
}

func (fake *FakeClient) DigestCalls(stub func(image.Name) (image.Digest, error)) {
	fake.digestMutex.Lock()
	defer fake.digestMutex.Unlock()
	fake.DigestStub = stub
}

func (fake *FakeClient) DigestArgsForCall(i int) image.Name {
	fake.digestMutex.RLock()
	defer fake.digestMutex.RUnlock()
	argsForCall := fake.digestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) DigestReturns(result1 image.Digest, result2 error) {
	fake.digestMutex.Lock()
	defer fake.digestMutex.Unlock()
	fake.DigestStub = nil
	fake.digestReturns = struct {
		result1 image.Digest
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) DigestReturnsOnCall(i int, result1 image.Digest, result2 error) {
	fake.digestMutex.Lock()
	defer fake.digestMutex.Unlock()
	fake.DigestStub = nil
	if fake.digestReturnsOnCall == nil {
		fake.digestReturnsOnCall = make(map[int]struct {
			result1 image.Digest
			result2 error
		})
	}
	fake.digestReturnsOnCall[i] = struct {
		result1 image.Digest
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) NewLayout(arg1 string) (registry.Layout, error) {
	fake.newLayoutMutex.Lock()
	ret, specificReturn := fake.newLayoutReturnsOnCall[len(fake.newLayoutArgsForCall)]
	fake.newLayoutArgsForCall = append(fake.newLayoutArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("NewLayout", []interface{}{arg1})
	fake.newLayoutMutex.Unlock()
	if fake.NewLayoutStub != nil {
		return fake.NewLayoutStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.newLayoutReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) NewLayoutCallCount() int {
	fake.newLayoutMutex.RLock()
	defer fake.newLayoutMutex.RUnlock()
	return len(fake.newLayoutArgsForCall)
}

func (fake *FakeClient) NewLayoutCalls(stub func(string) (registry.Layout, error)) {
	fake.newLayoutMutex.Lock()
	defer fake.newLayoutMutex.Unlock()
	fake.NewLayoutStub = stub
}

func (fake *FakeClient) NewLayoutArgsForCall(i int) string {
	fake.newLayoutMutex.RLock()
	defer fake.newLayoutMutex.RUnlock()
	argsForCall := fake.newLayoutArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) NewLayoutReturns(result1 registry.Layout, result2 error) {
	fake.newLayoutMutex.Lock()
	defer fake.newLayoutMutex.Unlock()
	fake.NewLayoutStub = nil
	fake.newLayoutReturns = struct {
		result1 registry.Layout
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) NewLayoutReturnsOnCall(i int, result1 registry.Layout, result2 error) {
	fake.newLayoutMutex.Lock()
	defer fake.newLayoutMutex.Unlock()
	fake.NewLayoutStub = nil
	if fake.newLayoutReturnsOnCall == nil {
		fake.newLayoutReturnsOnCall = make(map[int]struct {
			result1 registry.Layout
			result2 error
		})
	}
	fake.newLayoutReturnsOnCall[i] = struct {
		result1 registry.Layout
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ReadLayout(arg1 string) (registry.Layout, error) {
	fake.readLayoutMutex.Lock()
	ret, specificReturn := fake.readLayoutReturnsOnCall[len(fake.readLayoutArgsForCall)]
	fake.readLayoutArgsForCall = append(fake.readLayoutArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ReadLayout", []interface{}{arg1})
	fake.readLayoutMutex.Unlock()
	if fake.ReadLayoutStub != nil {
		return fake.ReadLayoutStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.readLayoutReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ReadLayoutCallCount() int {
	fake.readLayoutMutex.RLock()
	defer fake.readLayoutMutex.RUnlock()
	return len(fake.readLayoutArgsForCall)
}

func (fake *FakeClient) ReadLayoutCalls(stub func(string) (registry.Layout, error)) {
	fake.readLayoutMutex.Lock()
	defer fake.readLayoutMutex.Unlock()
	fake.ReadLayoutStub = stub
}

func (fake *FakeClient) ReadLayoutArgsForCall(i int) string {
	fake.readLayoutMutex.RLock()
	defer fake.readLayoutMutex.RUnlock()
	argsForCall := fake.readLayoutArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) ReadLayoutReturns(result1 registry.Layout, result2 error) {
	fake.readLayoutMutex.Lock()
	defer fake.readLayoutMutex.Unlock()
	fake.ReadLayoutStub = nil
	fake.readLayoutReturns = struct {
		result1 registry.Layout
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ReadLayoutReturnsOnCall(i int, result1 registry.Layout, result2 error) {
	fake.readLayoutMutex.Lock()
	defer fake.readLayoutMutex.Unlock()
	fake.ReadLayoutStub = nil
	if fake.readLayoutReturnsOnCall == nil {
		fake.readLayoutReturnsOnCall = make(map[int]struct {
			result1 registry.Layout
			result2 error
		})
	}
	fake.readLayoutReturnsOnCall[i] = struct {
		result1 registry.Layout
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.digestMutex.RLock()
	defer fake.digestMutex.RUnlock()
	fake.newLayoutMutex.RLock()
	defer fake.newLayoutMutex.RUnlock()
	fake.readLayoutMutex.RLock()
	defer fake.readLayoutMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ registry.Client = new(FakeClient)
