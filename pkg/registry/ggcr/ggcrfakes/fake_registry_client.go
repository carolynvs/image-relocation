// Code generated by counterfeiter. DO NOT EDIT.
package ggcrfakes

import (
	sync "sync"

	v1 "github.com/google/go-containerregistry/pkg/v1"
	image "github.com/pivotal/image-relocation/pkg/image"
	registry "github.com/pivotal/image-relocation/pkg/registry"
	ggcr "github.com/pivotal/image-relocation/pkg/registry/ggcr"
)

type FakeRegistryClient struct {
	ReadRemoteImageStub        func(image.Name) (registry.Image, error)
	readRemoteImageMutex       sync.RWMutex
	readRemoteImageArgsForCall []struct {
		arg1 image.Name
	}
	readRemoteImageReturns struct {
		result1 registry.Image
		result2 error
	}
	readRemoteImageReturnsOnCall map[int]struct {
		result1 registry.Image
		result2 error
	}
	WriteRemoteImageStub        func(v1.Image, image.Name) error
	writeRemoteImageMutex       sync.RWMutex
	writeRemoteImageArgsForCall []struct {
		arg1 v1.Image
		arg2 image.Name
	}
	writeRemoteImageReturns struct {
		result1 error
	}
	writeRemoteImageReturnsOnCall map[int]struct {
		result1 error
	}
	WriteRemoteIndexStub        func(v1.ImageIndex, image.Name) error
	writeRemoteIndexMutex       sync.RWMutex
	writeRemoteIndexArgsForCall []struct {
		arg1 v1.ImageIndex
		arg2 image.Name
	}
	writeRemoteIndexReturns struct {
		result1 error
	}
	writeRemoteIndexReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRegistryClient) ReadRemoteImage(arg1 image.Name) (registry.Image, error) {
	fake.readRemoteImageMutex.Lock()
	ret, specificReturn := fake.readRemoteImageReturnsOnCall[len(fake.readRemoteImageArgsForCall)]
	fake.readRemoteImageArgsForCall = append(fake.readRemoteImageArgsForCall, struct {
		arg1 image.Name
	}{arg1})
	fake.recordInvocation("ReadRemoteImage", []interface{}{arg1})
	fake.readRemoteImageMutex.Unlock()
	if fake.ReadRemoteImageStub != nil {
		return fake.ReadRemoteImageStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.readRemoteImageReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRegistryClient) ReadRemoteImageCallCount() int {
	fake.readRemoteImageMutex.RLock()
	defer fake.readRemoteImageMutex.RUnlock()
	return len(fake.readRemoteImageArgsForCall)
}

func (fake *FakeRegistryClient) ReadRemoteImageCalls(stub func(image.Name) (registry.Image, error)) {
	fake.readRemoteImageMutex.Lock()
	defer fake.readRemoteImageMutex.Unlock()
	fake.ReadRemoteImageStub = stub
}

func (fake *FakeRegistryClient) ReadRemoteImageArgsForCall(i int) image.Name {
	fake.readRemoteImageMutex.RLock()
	defer fake.readRemoteImageMutex.RUnlock()
	argsForCall := fake.readRemoteImageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRegistryClient) ReadRemoteImageReturns(result1 registry.Image, result2 error) {
	fake.readRemoteImageMutex.Lock()
	defer fake.readRemoteImageMutex.Unlock()
	fake.ReadRemoteImageStub = nil
	fake.readRemoteImageReturns = struct {
		result1 registry.Image
		result2 error
	}{result1, result2}
}

func (fake *FakeRegistryClient) ReadRemoteImageReturnsOnCall(i int, result1 registry.Image, result2 error) {
	fake.readRemoteImageMutex.Lock()
	defer fake.readRemoteImageMutex.Unlock()
	fake.ReadRemoteImageStub = nil
	if fake.readRemoteImageReturnsOnCall == nil {
		fake.readRemoteImageReturnsOnCall = make(map[int]struct {
			result1 registry.Image
			result2 error
		})
	}
	fake.readRemoteImageReturnsOnCall[i] = struct {
		result1 registry.Image
		result2 error
	}{result1, result2}
}

func (fake *FakeRegistryClient) WriteRemoteImage(arg1 v1.Image, arg2 image.Name) error {
	fake.writeRemoteImageMutex.Lock()
	ret, specificReturn := fake.writeRemoteImageReturnsOnCall[len(fake.writeRemoteImageArgsForCall)]
	fake.writeRemoteImageArgsForCall = append(fake.writeRemoteImageArgsForCall, struct {
		arg1 v1.Image
		arg2 image.Name
	}{arg1, arg2})
	fake.recordInvocation("WriteRemoteImage", []interface{}{arg1, arg2})
	fake.writeRemoteImageMutex.Unlock()
	if fake.WriteRemoteImageStub != nil {
		return fake.WriteRemoteImageStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.writeRemoteImageReturns
	return fakeReturns.result1
}

func (fake *FakeRegistryClient) WriteRemoteImageCallCount() int {
	fake.writeRemoteImageMutex.RLock()
	defer fake.writeRemoteImageMutex.RUnlock()
	return len(fake.writeRemoteImageArgsForCall)
}

func (fake *FakeRegistryClient) WriteRemoteImageCalls(stub func(v1.Image, image.Name) error) {
	fake.writeRemoteImageMutex.Lock()
	defer fake.writeRemoteImageMutex.Unlock()
	fake.WriteRemoteImageStub = stub
}

func (fake *FakeRegistryClient) WriteRemoteImageArgsForCall(i int) (v1.Image, image.Name) {
	fake.writeRemoteImageMutex.RLock()
	defer fake.writeRemoteImageMutex.RUnlock()
	argsForCall := fake.writeRemoteImageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRegistryClient) WriteRemoteImageReturns(result1 error) {
	fake.writeRemoteImageMutex.Lock()
	defer fake.writeRemoteImageMutex.Unlock()
	fake.WriteRemoteImageStub = nil
	fake.writeRemoteImageReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRegistryClient) WriteRemoteImageReturnsOnCall(i int, result1 error) {
	fake.writeRemoteImageMutex.Lock()
	defer fake.writeRemoteImageMutex.Unlock()
	fake.WriteRemoteImageStub = nil
	if fake.writeRemoteImageReturnsOnCall == nil {
		fake.writeRemoteImageReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeRemoteImageReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRegistryClient) WriteRemoteIndex(arg1 v1.ImageIndex, arg2 image.Name) error {
	fake.writeRemoteIndexMutex.Lock()
	ret, specificReturn := fake.writeRemoteIndexReturnsOnCall[len(fake.writeRemoteIndexArgsForCall)]
	fake.writeRemoteIndexArgsForCall = append(fake.writeRemoteIndexArgsForCall, struct {
		arg1 v1.ImageIndex
		arg2 image.Name
	}{arg1, arg2})
	fake.recordInvocation("WriteRemoteIndex", []interface{}{arg1, arg2})
	fake.writeRemoteIndexMutex.Unlock()
	if fake.WriteRemoteIndexStub != nil {
		return fake.WriteRemoteIndexStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.writeRemoteIndexReturns
	return fakeReturns.result1
}

func (fake *FakeRegistryClient) WriteRemoteIndexCallCount() int {
	fake.writeRemoteIndexMutex.RLock()
	defer fake.writeRemoteIndexMutex.RUnlock()
	return len(fake.writeRemoteIndexArgsForCall)
}

func (fake *FakeRegistryClient) WriteRemoteIndexCalls(stub func(v1.ImageIndex, image.Name) error) {
	fake.writeRemoteIndexMutex.Lock()
	defer fake.writeRemoteIndexMutex.Unlock()
	fake.WriteRemoteIndexStub = stub
}

func (fake *FakeRegistryClient) WriteRemoteIndexArgsForCall(i int) (v1.ImageIndex, image.Name) {
	fake.writeRemoteIndexMutex.RLock()
	defer fake.writeRemoteIndexMutex.RUnlock()
	argsForCall := fake.writeRemoteIndexArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRegistryClient) WriteRemoteIndexReturns(result1 error) {
	fake.writeRemoteIndexMutex.Lock()
	defer fake.writeRemoteIndexMutex.Unlock()
	fake.WriteRemoteIndexStub = nil
	fake.writeRemoteIndexReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRegistryClient) WriteRemoteIndexReturnsOnCall(i int, result1 error) {
	fake.writeRemoteIndexMutex.Lock()
	defer fake.writeRemoteIndexMutex.Unlock()
	fake.WriteRemoteIndexStub = nil
	if fake.writeRemoteIndexReturnsOnCall == nil {
		fake.writeRemoteIndexReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeRemoteIndexReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRegistryClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.readRemoteImageMutex.RLock()
	defer fake.readRemoteImageMutex.RUnlock()
	fake.writeRemoteImageMutex.RLock()
	defer fake.writeRemoteImageMutex.RUnlock()
	fake.writeRemoteIndexMutex.RLock()
	defer fake.writeRemoteIndexMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRegistryClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ggcr.RegistryClient = new(FakeRegistryClient)
